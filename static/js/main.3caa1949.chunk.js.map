{"version":3,"sources":["components/header/Header.js","components/articles/ArticleList.js","components/footer/Footer.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["Header","searchQuery","handleUserSearchInput","onSearchSubmit","className","src","alt","type","value","onChange","name","placeholder","onClick","aria-label","icon","faSearch","ArticleList","text","title","author","description","url","imageUrl","href","target","rel","length","substring","Footer","App","useState","isLoading","setIsLoading","articles","setArticles","errorMessage","setErrorMessage","setSearchQuery","inputErrorMessage","setInputErrorMessage","URL","fetchParams","headers","Authorization","fetchData","a","fetch","response","json","payload","Array","isArray","splice","Error","console","log","message","e","toLowerCase","preventDefault","map","article","index","urlToImage","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","process","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"6SA8BeA,EAzBA,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,YAAaC,EAA4C,EAA5CA,sBAAuBC,EAAqB,EAArBA,eACpD,OACE,yBAAQC,UAAU,MAAlB,UACE,qBACEA,UAAU,WACVC,IAAI,mEACJC,IAAI,YAEN,uBAAMF,UAAU,aAAhB,UACE,uBACEA,UAAU,mBACVG,KAAK,OACLC,MAAOP,EACPQ,SAAUP,EACVQ,KAAK,SACLC,YAAY,8BAEd,wBAAQP,UAAU,oBAAoBQ,QAAST,EAAgBU,aAAW,SAA1E,SACE,cAAC,IAAD,CAAiBC,KAAMC,eCAlBC,G,MApBK,SAAC,GAAmD,IAGzCC,EAHRC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,OAAQC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,IAAKC,EAAe,EAAfA,SAMtD,OACE,yBAASlB,UAAU,oBAAnB,SACE,oBAAGmB,KAAMF,EAAKjB,UAAU,YAAYoB,OAAO,SAASC,IAAI,sBAAxD,UACE,qBAAKpB,IAAKiB,GAAY,gCAAkChB,IAAKY,IAC7D,0BAASd,UAAU,oBAAnB,UACE,6BAAKc,IACJC,EAAS,qCAAQA,KAAe,KACjC,6BAVqBF,EAUGG,EAT9BH,EAAKS,OAAS,IAAd,UAAuBT,EAAKU,UAAU,EAAG,KAAzC,OAAqDV,eCI1CW,G,MARA,WACb,OACE,iCACE,wFCoFSC,MApFf,WAAgB,IAAD,EACqBC,oBAAS,GAD9B,mBACNC,EADM,KACKC,EADL,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAG2BJ,mBAAS,IAHpC,mBAGNK,EAHM,KAGQC,EAHR,OAIyBN,mBAAS,IAJlC,mBAIN7B,EAJM,KAIOoC,EAJP,OAKqCP,mBAAS,IAL9C,mBAKNQ,EALM,KAKaC,EALb,KAQPC,EAAG,kFAA8EvC,EAA9E,sBAGHwC,EAAc,CAClBC,QAAS,CACPC,cAAe,qCAKbC,EAAS,uCAAG,8BAAAC,EAAA,sEAEdb,GAAa,GACbI,EAAgB,IAHF,SAISU,MAAMN,EAAKC,GAJpB,cAIRM,EAJQ,gBAKQA,EAASC,OALjB,aAKRC,EALQ,QAMFhB,SAASP,OAAS,GAAKwB,MAAMC,QAAQF,EAAQhB,WAN3C,iBAOZC,EAAYe,EAAQhB,SAASmB,OAAO,EAAG,KACvCpB,GAAa,GACbK,EAAe,IATH,8BAUD,IAAIgB,MAAM,oCAVT,0DAYdC,QAAQC,IAAI,KAAMC,SAClBpB,EAAgB,0EAChBJ,GAAa,GAdC,0DAAH,qDAgCf,OACE,qCACE,cAAC,EAAD,CACE/B,YAAaA,EACbC,sBAjBwB,SAACuD,GAAD,OAAOpB,EAAeoB,EAAEjC,OAAOhB,MAAMkD,gBAkB7DvD,eAfiB,SAACsD,GACtBA,EAAEE,iBACFpB,EAAqB,IACD,KAAhBtC,EACFsC,EAAqB,6CAErBK,OAWGN,GAAqB,mBAAGlC,UAAU,cAAb,SAA4BkC,IACpD,sBAAMlC,UAAU,eAAhB,SACG2B,EACC,sDAEA,qCACGI,GAAgB,mBAAG/B,UAAU,cAAb,SAA4B+B,IAC5CF,EAASP,OAAS,EACfO,EAAS2B,KAAI,SAACC,EAASC,GAAV,OACX,cAAC,EAAD,CAEE5C,MAAO2C,EAAQ3C,MACfC,OAAQ0C,EAAQ1C,OAChBC,YAAayC,EAAQzC,YACrBC,IAAKwC,EAAQxC,IACbC,SAAQ,OAAEuC,QAAF,IAAEA,OAAF,EAAEA,EAASE,YALdD,MAQT,UAIV,cAAC,EAAD,QCzEAE,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1B7B,QAAQC,IACN,+GAKEiB,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlBvB,QAAQC,IAAI,sCAGRiB,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAACC,GACNjC,QAAQiC,MAAM,4CAA6CA,MCzFjEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDWnB,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIjC,IAAIqD,qBAAwB3B,OAAOC,SAAS5C,MACpDuE,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMsB,qBAAN,sBAEP7B,IAgEV,SAAiCO,EAAOC,GAEtC1B,MAAMyB,EAAO,CACX7B,QAAS,CAAE,iBAAkB,YAE5BkC,MAAK,SAAC7B,GAEL,IAAMiD,EAAcjD,EAASL,QAAQuD,IAAI,gBAEnB,MAApBlD,EAASmD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C1B,UAAUC,cAAc0B,MAAMxB,MAAK,SAACC,GAClCA,EAAawB,aAAazB,MAAK,WAC7BV,OAAOC,SAASmC,eAKpBhC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLhC,QAAQC,IAAI,oEAtFVgD,CAAwBhC,EAAOC,GAI/BC,UAAUC,cAAc0B,MAAMxB,MAAK,WACjCtB,QAAQC,IACN,+GAMJe,EAAgBC,EAAOC,OCnC/BgC,K","file":"static/js/main.3caa1949.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./header.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Header = ({ searchQuery, handleUserSearchInput, onSearchSubmit }) => {\n  return (\n    <header className=\"nav\">\n      <img\n        className=\"nav-logo\"\n        src=\"https://img01.bt.co.uk/s/assets/191120/images/logo/logo-2018.svg\"\n        alt=\"bt logo\"\n      />\n      <form className=\"nav-search\">\n        <input\n          className=\"nav-search-input\"\n          type=\"text\"\n          value={searchQuery}\n          onChange={handleUserSearchInput}\n          name=\"search\"\n          placeholder=\"Search the latest news...\"\n        />\n        <button className=\"nav-search-button\" onClick={onSearchSubmit} aria-label=\"search\">\n          <FontAwesomeIcon icon={faSearch} />\n        </button>\n      </form>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./article.css\";\n\nconst ArticleList = ({ title, author, description, url, imageUrl }) => {\n\n  // returns new string and appends elipsis when description is more than 150 characters; \n  const truncateDescription = (text) =>\n    text.length > 150 ? `${text.substring(0, 150)}...` : text;\n\n  return (\n    <section className=\"card-item-wrapper\">\n      <a href={url} className=\"card-link\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <img src={imageUrl || \"https://picsum.photos/200/300\" } alt={title} />\n        <article className=\"card-item-content\">\n          <h3>{title}</h3>\n          {author ? <h4>By {author}</h4> : null}\n          <p>{truncateDescription(description)}</p>\n        </article>\n      </a>\n    </section>\n  );\n};\n\nexport default ArticleList;\n","import React from 'react';\nimport './footer.css';\n\nconst Footer = () => {\n  return (\n    <footer>\n      <h1>BT React Code Test - by Sandeep Bassi - April 2021</h1>\n    </footer>\n  )\n}\n\nexport default Footer;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/header/Header\";\nimport ArticleList from \"./components/articles/ArticleList\";\nimport Footer from \"./components/footer/Footer\";\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [articles, setArticles] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [inputErrorMessage, setInputErrorMessage] = useState(\"\");\n\n  //const u = `https://newsapi.org/v2/everything?q=${searchQuery}&sortBy=publishedAt&apiKey=3e8fcdeadac74b35b8e9ef95298042b7`;\n  const URL = `https://cors-anywhere.herokuapp.com/https://newsapi.org/v2/everything?q=${searchQuery}&sortBy=popularity`;\n\n  // set newsapi key in http header as recommended\n  const fetchParams = {\n    headers: {\n      Authorization: \"3e8fcdeadac74b35b8e9ef95298042b7\",\n    },\n  };\n\n  // asynchronous fetcher and setter; checks if payload response is correct type and not empty before setting state\n  const fetchData = async () => {\n    try {\n      setIsLoading(true);\n      setErrorMessage(\"\");\n      const response = await fetch(URL, fetchParams);\n      const payload = await response.json();\n      if (payload.articles.length > 0 && Array.isArray(payload.articles)) {\n        setArticles(payload.articles.splice(0, 10)); // stores first 10 news articles\n        setIsLoading(false);\n        setSearchQuery(\"\");\n      } else throw new Error(\"payload is empty or not an array\"); // logs custom error object if payload is empty or !array\n    } catch (error) {\n      console.log(error.message);\n      setErrorMessage(\"Sorry there has been an error fetching your results. Please try again.\");\n      setIsLoading(false);\n    }\n  };\n\n  // gets and sets user search value\n  const handleUserSearchInput = (e) => setSearchQuery(e.target.value.toLowerCase());\n\n  // calls fetchdata api on button click if searchQuery is not empty\n  const onSearchSubmit = (e) => {\n    e.preventDefault();\n    setInputErrorMessage(\"\");\n    if (searchQuery === \"\") {\n      setInputErrorMessage(\"Please enter your article search criteria\");\n    } else {\n      fetchData();\n    }\n  };\n\n  return (\n    <>\n      <Header\n        searchQuery={searchQuery}\n        handleUserSearchInput={handleUserSearchInput}\n        onSearchSubmit={onSearchSubmit}\n        />\n        {inputErrorMessage && <p className=\"input-error\">{inputErrorMessage}</p>}\n      <main className=\"main-wrapper\">\n        {isLoading ? (\n          <h1>Fecthing articles...</h1>\n        ) : (\n          <>\n            {errorMessage && <p className=\"input-error\">{errorMessage}</p>}\n            {articles.length > 0\n              ? articles.map((article, index) => (\n                  <ArticleList\n                    key={index}\n                    title={article.title}\n                    author={article.author}\n                    description={article.description}\n                    url={article.url}\n                    imageUrl={article?.urlToImage}\n                  />\n                ))\n              : null}\n          </>\n        )}\n      </main>\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();"],"sourceRoot":""}